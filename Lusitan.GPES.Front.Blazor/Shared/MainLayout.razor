@inherits LayoutComponentBase
@inject IStringLocalizer<App> _local

<MudThemeProvider />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.ExtraSmall"
    CloseButton="true"
    DisableBackdropClick="true"
    NoHeader="false" />
<MudSnackbarProvider />
<MudThemeProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1" style="background-color:#a9d0d7">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText Typo="Typo.h5" Class="ml-3">@_local["nomeAplicacao"]</MudText>
                <MudSpacer />
                <Linguagem />
                <MudText lass="ml-3" Color="Color.Dark">
                    @_nomeUsuarioLogado
                    <br />
                    <label style="font-size: 13px">@_local["AcessadoEm"] @_ultimoAcesso</label>
                </MudText>
                <a class="navbar-brand">
                    <MudNavLink OnClick=Logout>
                        <img src="img/log-off.png">
                    </MudNavLink>
                </a>
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
</AuthorizeView>

@code {
    //#95B2C2
    bool _drawerOpen = false;
    string _nomeUsuarioLogado = string.Empty;
    string _ultimoAcesso = string.Empty;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    [CascadingParameter]
    protected Task<AuthenticationState> _auth { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var _user = (await _auth).User;

            _nomeUsuarioLogado = _user.Identity.Name;
            _ultimoAcesso = await _sessao.GetItemAsync<string>("ultimoAcesso");

            var _usuario = await _sessao.GetItemAsync<UsuarioDominio>("Usuario");

            if (!_user.Identity.IsAuthenticated)
            {
                _nav.NavigateTo("login");
            }

            StateHasChanged();
        }
    }

    void Logout()
    {
        ((ProvedorAutenticacao)_autenticacao).Logout();

        _nav.NavigateTo("index", forceLoad: true);
        base.StateHasChanged();
    }
}
